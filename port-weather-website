<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Elegant Desk Weather</title>

<!-- Free, classy typeface -->
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;500;700&display=swap" rel="stylesheet">

<style>
/* ─────────────────────────────────────────────
   0. CSS RESET & CUSTOM PROPERTIES
───────────────────────────────────────────── */
*,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
:root{
  /* will be overwritten by JS */
  --bg-start:#ffffff;
  --bg-end:#f8fafc;
  --text:#111827;
  --accent:#2563eb;
  --border:#2563eb;
  --glass-rgba:rgba(255,255,255,.35);
}

html,body{height:100%}
body{
  font-family:"Inter",system-ui,sans-serif;
  background:linear-gradient(135deg,var(--bg-start),var(--bg-end));
  color:var(--text);
  transition:background 1.2s,color .8s;
}

/* ─────────────────────────────────────────────
   1. LAYOUT
───────────────────────────────────────────── */
main{
  min-height:100%;
  display:flex;
  flex-direction:column;
  justify-content:center;
  align-items:center;
  padding:2.5rem 1.2rem;
}

.card{
  width:min(100%,26rem);
  padding:2.5rem 2rem;
  display:flex;
  flex-direction:column;
  align-items:center;

  border:4px solid var(--border);
  border-radius:1rem;
  background:var(--glass-rgba);
  backdrop-filter:blur(12px);
  transition:border-color .8s,background .8s;
}

h1{
  font-size:1.9rem;
  font-weight:700;
  text-align:center;
  margin-bottom:1.25rem;
}

.info{
  font-size:1.2rem;
  margin-bottom:.75rem;
  text-align:center;
}
.info span{font-weight:500;color:var(--accent)}

@media(max-width:480px){
  h1{font-size:1.55rem}
  .info{font-size:1.05rem}
}
</style>
</head>

<body>
<main>
  <div class="card">
      <h1 id="location">Locating…</h1>
      <p class="info" id="time"></p>
      <p class="info" id="weather"></p>
  </div>
</main>

<script>
/* ╔═══════════════════════════════════════════╗
   ║        SECTION A – CONFIGURATION          ║
   ╚═══════════════════════════════════════════╝ */
const OPEN_WEATHER_KEY      = "REPLACE_WITH_YOUR_OPENWEATHERMAP_API_KEY";
const WEATHER_REFRESH_MIN   = 10;        // call API every n minutes
const CLOCK_TICK_MS         = 1000;      // update clock every second

/* ╔═══════════════════════════════════════════╗
   ║        SECTION B – DOM REFERENCES         ║
   ╚═══════════════════════════════════════════╝ */
const els = {
  location : document.getElementById("location"),
  time     : document.getElementById("time"),
  weather  : document.getElementById("weather")
};

/* ╔═══════════════════════════════════════════╗
   ║        SECTION C – STATE STORAGE          ║
   ╚═══════════════════════════════════════════╝ */
let state = {
  coords        : null,      // {lat,lon}
  weather       : null,      // last weather payload
  paletteToken  : null       // e.g. "dusk-rain" – to detect changes
};

/* ╔═══════════════════════════════════════════╗
   ║        SECTION D – INITIALISATION         ║
   ╚═══════════════════════════════════════════╝ */
init();
async function init(){
  try{
      state.coords = await getCoords();
      await updateWeather();         // initial weather fetch
      startClockLoop();              // start 1-second UI loop
      setInterval(updateWeather, WEATHER_REFRESH_MIN*60*1000);
  }catch(err){
      console.error(err);
      els.location.textContent = "Location unavailable ❌";
      els.time.textContent     = "";
      els.weather.textContent  = "Allow location access and reload.";
  }
}

/* ╔═══════════════════════════════════════════╗
   ║        SECTION E – CLOCK / UI LOOP        ║
   ╚═══════════════════════════════════════════╝ */
function startClockLoop(){
  render();                // paint immediately
  setInterval(render, CLOCK_TICK_MS);
}

function render(){
  if(!state.weather) return;

  /* 1. CLOCK TEXT (local) */
  const locDate  = new Date();
  els.time.innerHTML = `<span>Time:</span> ${locDate.toLocaleString([],{
    hour:'numeric',minute:'2-digit',second:'2-digit',
    weekday:'long',month:'long',day:'numeric'
  })}`;

  /* 2. WEATHER TEXT (static until next API hit) */
  const w = state.weather;
  const desc  = w.weather[0].main;
  const tempC = Math.round(w.main.temp);
  els.location.textContent = w.name;
  els.weather.innerHTML    = `<span>Weather:</span> ${desc}, ${tempC}°C`;

  /* 3. THEME TOKEN – depends on time & weather */
  const token = buildPaletteToken(locDate.getTime()/1000, w); // pass unix seconds
  if(token !== state.paletteToken){
      state.paletteToken = token;
      applyPalette(PALETTES[token] || PALETTES["day-clear"]);
  }
}

/* ╔═══════════════════════════════════════════╗
   ║        SECTION F – DATA FETCHING          ║
   ╚═══════════════════════════════════════════╝ */
function getCoords(){
  return new Promise((res,rej)=>{
    if(!navigator.geolocation) return rej(new Error("Geolocation unsupported"));
    navigator.geolocation.getCurrentPosition(
      pos=>res({lat:pos.coords.latitude,lon:pos.coords.longitude}),
      rej,
      {enableHighAccuracy:true,timeout:10000}
    );
  });
}

async function updateWeather(){
  const {lat,lon} = state.coords;
  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${OPEN_WEATHER_KEY}`;
  const r   = await fetch(url);
  if(!r.ok) throw new Error("Weather API error");
  state.weather = await r.json();
}

/* ╔═══════════════════════════════════════════╗
   ║        SECTION G – THEME ENGINE           ║
   ╚═══════════════════════════════════════════╝ */
function normalise(desc){
  const d = desc.toLowerCase();
  if(d.includes("thunder")) return "thunder";
  if(/rain|drizzle/.test(d))return "rain";
  if(/snow/.test(d))        return "snow";
  if(/cloud/.test(d))       return "clouds";
  if(/mist|haze|fog|smoke|ash|dust|sand/.test(d)) return "fog";
  if(/tornado|squall/.test(d)) return "wind";
  return "clear";
}

function timePeriod(now,sunrise,sunset){
  const ONE_HR = 3600;
  if(now < sunrise-ONE_HR) return "night";
  if(now < sunrise+ONE_HR) return "dawn";
  if(now < sunset-ONE_HR)  return "day";
  if(now < sunset+ONE_HR)  return "dusk";
  return "night";
}

function buildPaletteToken(nowUnix,weather){
  const group   = normalise(weather.weather[0].main);
  const period  = timePeriod(nowUnix, weather.sys.sunrise, weather.sys.sunset);
  return `${period}-${group}`;
}

function applyPalette(p){
  document.documentElement.style.setProperty("--bg-start",p.bgStart);
  document.documentElement.style.setProperty("--bg-end",p.bgEnd);
  document.documentElement.style.setProperty("--text",p.text);
  document.documentElement.style.setProperty("--accent",p.accent);
  document.documentElement.style.setProperty("--border",p.border || p.accent);
  document.documentElement.style.setProperty("--glass-rgba",hexToGlass(p.bgEnd,0.3));
}

function hexToGlass(hex,alpha){
  const n=parseInt(hex.slice(1),16);
  const r=(n>>16)&255,g=(n>>8)&255,b=n&255;
  return `rgba(${r},${g},${b},${alpha})`;
}

/* ╔═══════════════════════════════════════════╗
   ║        SECTION H – COLOUR PALETTES        ║
   ╚═══════════════════════════════════════════╝ */
const PALETTES = {
 /* CLEAR SKY */
 "dawn-clear":   {bgStart:"#ffedd5",bgEnd:"#ffe4b5",text:"#4b371c",accent:"#f59e0b"},
 "day-clear":    {bgStart:"#cfe9ff",bgEnd:"#9cd6ff",text:"#083344",accent:"#0ea5e9"},
 "dusk-clear":   {bgStart:"#fde2d4",bgEnd:"#fab797",text:"#3c1a02",accent:"#f97316"},
 "night-clear":  {bgStart:"#031634",bgEnd:"#0b2946",text:"#dbeafe",accent:"#fef08a"},

 /* CLOUDS */
 "dawn-clouds":  {bgStart:"#e2e8f0",bgEnd:"#cfd8e3",text:"#374151",accent:"#94a3b8"},
 "day-clouds":   {bgStart:"#d9e2ec",bgEnd:"#bcccdc",text:"#334155",accent:"#64748b"},
 "dusk-clouds":  {bgStart:"#dcd7d1",bgEnd:"#bcb4af",text:"#3f3f46",accent:"#8e8d8a"},
 "night-clouds": {bgStart:"#2b303b",bgEnd:"#3f4753",text:"#d1d5db",accent:"#9ca3af"},

 /* RAIN */
 "dawn-rain":    {bgStart:"#cfd8dc",bgEnd:"#90a4ae",text:"#1e293b",accent:"#0284c7"},
 "day-rain":     {bgStart:"#a5b4fc",bgEnd:"#60a5fa",text:"#0c1f4a",accent:"#2563eb"},
 "dusk-rain":    {bgStart:"#7895b2",bgEnd:"#536d8d",text:"#f1f5f9",accent:"#1e40af"},
 "night-rain":   {bgStart:"#1e293b",bgEnd:"#334155",text:"#dbeafe",accent:"#3b82f6"},

 /* THUNDER */
 "dawn-thunder": {bgStart:"#e8e7e5",bgEnd:"#d2d1cf",text:"#3f3f46",accent:"#facc15"},
 "day-thunder":  {bgStart:"#b1b1b1",bgEnd:"#8d8d8d",text:"#111827",accent:"#fcd34d"},
 "dusk-thunder": {bgStart:"#5f5b66",bgEnd:"#3f3a43",text:"#f3f4f6",accent:"#fde047"},
 "night-thunder":{bgStart:"#21232c",bgEnd:"#393d4d",text:"#f9fafb",accent:"#facc15"},

 /* SNOW */
 "dawn-snow":    {bgStart:"#f0f9ff",bgEnd:"#dbeafe",text:"#145374",accent:"#0ea5e9"},
 "day-snow":     {bgStart:"#e0f2fe",bgEnd:"#bae6fd",text:"#0c4a6e",accent:"#0284c7"},
 "dusk-snow":    {bgStart:"#cbd5e1",bgEnd:"#94a3b8",text:"#1e293b",accent:"#0ea5e9"},
 "night-snow":   {bgStart:"#0b3d91",bgEnd:"#164eb5",text:"#cfe0f3",accent:"#6ba8e5"},

 /* FOG */
 "dawn-fog":     {bgStart:"#e2e8f0",bgEnd:"#e8e9eb",text:"#374151",accent:"#a1a1aa"},
 "day-fog":      {bgStart:"#d1d5db",bgEnd:"#a1a1aa",text:"#1f2937",accent:"#6b7280"},
 "dusk-fog":     {bgStart:"#a1a1aa",bgEnd:"#71717a",text:"#f1f5f9",accent:"#d4d4d8"},
 "night-fog":    {bgStart:"#484d54",bgEnd:"#30363d",text:"#d1d5db",accent:"#a1a1aa"},

 /* WIND / TORNADO */
 "dawn-wind":    {bgStart:"#fce7f3",bgEnd:"#fbcfe8",text:"#831843",accent:"#db2777"},
 "day-wind":     {bgStart:"#fda4af",bgEnd:"#fb7185",text:"#7f1d1d",accent:"#be123c"},
 "dusk-wind":    {bgStart:"#f472b6",bgEnd:"#ec4899",text:"#ffffff",accent:"#db2777"},
 "night-wind":   {bgStart:"#9d174d",bgEnd:"#831843",text:"#fce7f3",accent:"#f9a8d4"}
};
</script>
</body>
</html>
